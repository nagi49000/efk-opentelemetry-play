version: '3'
services:
  fluentbit:
    image: fluent/fluent-bit:3.1.4
    container_name: fluentbit
    environment:
      - OTEL_SERVICE_NAME=fluent-bit-host
    command: /fluent-bit/bin/fluent-bit -c fluent-bit/etc/fluent-bit.yaml
    volumes:
      - ./fluent-bit/fluent-bit.yaml:/fluent-bit/etc/fluent-bit.yaml:ro
      - /var/log:/etc/host-var-log:ro
    networks:
      - esnet

  # sidecar container to run commands for setting up elasticsearch
  elasticsearch-setup:
    build: ./elasticsearch-setup
    container_name: elasticsearch-setup
    networks:
      - esnet
    depends_on:
      elasticsearch:
        condition: service_healthy

  elasticsearch:
    image: elasticsearch:8.14.3
    container_name: elasticsearch
    environment:
      - network.host=0.0.0.0
      - discovery.type=single-node
      - cluster.name=docker-cluster
      - node.name=cluster1-node1
      - xpack.license.self_generated.type=basic
      - xpack.security.enabled=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - ELASTIC_PASSWORD=changeme
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - 9200:9200
    networks:
      - esnet
    healthcheck:
        test: "curl --silent --fail --user elastic:changeme localhost:9200/_cluster/health || exit 1"
        interval: 10s
        timeout: 30s
        retries: 3

  kibana:
    image: kibana:8.14.3
    container_name: kibana
    environment:
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=changeme
    # some things are just too complicated to specify as env vars... so into a yml they go
    volumes:
      - ./kibana/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
    ports:
      - "5601:5601"
    networks:
      - esnet
    depends_on:
      - elasticsearch
    healthcheck:
        test: "curl --silent --fail localhost:5601 || exit 1"
        interval: 30s
        timeout: 30s
        retries: 3

  apm-server:
    image: elastic/apm-server:8.14.3
    container_name: apm-server
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETGID
      - SETUID
    ports:
      - 8200:8200
    command: >
       apm-server -e
         -E apm-server.host="0.0.0.0:8200"
         -E output.elasticsearch.hosts=["http://elasticsearch:9200"]
         -E output.elasticsearch.username=elastic
         -E output.elasticsearch.password=changeme
         -E logging.level=warning
         -E apm-server.default_service_environment=development
    networks:
      - esnet
    depends_on:
      - elasticsearch
      - kibana

  fastapi-app:
    build: ./fastapi-app
    container_name: fastapi-app
    environment:
      # specify OTEL as per https://opentelemetry.io/docs/languages/sdk-configuration/otlp-exporter/
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://apm-server:8200
      - OTEL_SERVICE_NAME=fastapi-app
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
      - LOG_LEVEL=INFO
      # handy to set these for debug - OTEL output should appear in docker logs
      # - OTEL_TRACES_EXPORTER=console
      # - OTEL_METRICS_EXPORTER=console
      # - OTEL_LOGS_EXPORTER=console
    ports:
      - "6780:6780"
    networks:
      - esnet
    healthcheck:
        test: python -c 'import requests; assert requests.get("http://localhost:6780/hello_world").status_code == 200'
        interval: 30s
        timeout: 30s
        retries: 3

networks:
  esnet: